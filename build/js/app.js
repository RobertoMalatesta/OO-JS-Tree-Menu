!function(){"use strict";function t(){var t=this;t.arrAllMenuObjects=[],t.arrMainMenuItems=[];var n=function(t){var e=new XMLHttpRequest;e.overrideMimeType("application/json"),e.open("GET","menu.json",!0),e.onreadystatechange=function(){console.log("typeof xobj.readyState: ",typeof e.readyState,e.readyState),console.log("typeof xobj.status: ",typeof e.status,e.status),4===e.readyState&&200===e.status&&t(e.responseText)},e.send(null)},i=function(n){var i,r=n.menu;for(i=0;i<r.length;i++){var s=new e(r[i]);t.arrMainMenuItems.push(s),t.arrAllMenuObjects.push(s);var a=s.menu;if(null!==a){var o;for(o=0;o<a.length;o++){var l=new e(a[o]);t.arrAllMenuObjects.push(l)}}}},r=function(){if(t.container||(t.container=document.getElementById("menu-container")),null===t.container)throw new Error("There is no menu container element in the DOM.");return t.container},s=function(){var e,n=document.createElement("ul");for(e=0;e<t.arrMainMenuItems.length;e++)n.appendChild(t.arrMainMenuItems[e].draw());r().appendChild(n)},a=function(){r().addEventListener("click",function(t){""!==t.target.id&&o(t.target.id)})},o=function(e){t.arrAllMenuObjects.map(function(t){t.id===e&&t.displayContent()}),l(e)},l=function(t){var e=document.getElementById(t);if(e.children.length>0){var n=e.firstElementChild.style.display;e.firstElementChild.style.display="block"===n?"none":"block"}};this.init=function(){n(function(t){try{var e=JSON.parse(t);i(e),s(),a()}catch(n){throw new Error("Failed loading JSON source file.")}})}}function e(t){for(var e in t)e in t&&(this[e]=t[e])}e.prototype.displayContent=function(){document.getElementById("content").innerHTML=this.content},e.prototype.draw=function(){var t=document.createElement("li");t.setAttribute("id",this.id),t.setAttribute("class",this.cssClass),t.innerHTML=this.description;var e=this.menu;if(null!==e){t.setAttribute("id",this.id),t.setAttribute("class",this.cssClass),t.setAttribute("style","border-right: 5px solid orange"),t.innerHTML=this.description;var n=document.createElement("ul");n.setAttribute("id",this.id),n.setAttribute("style","display: none");var i;for(i=0;i<e.length;i++){var r=document.createElement("li");r.setAttribute("id",e[i].id),r.setAttribute("class",e[i].cssClass),r.innerHTML=e[i].description,n.appendChild(r)}t.appendChild(n)}return t};var n=new t;n.init()}();
//# sourceMappingURL=data:application/json;base64,
